{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","person","id","name","email","CardList","persons","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","a","fetch","response","json","personData","this","filterPersons","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAIaA,EAAO,SAAAC,GAAK,OAErB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,OAAOC,GAAvC,4BACvB,6BAAKL,EAAMI,OAAOE,OAClB,4BAAIN,EAAMI,OAAOG,YCLZC,EAAW,SAAAR,GAAK,OACrB,qBAAKC,UAAW,YAAhB,SAEGD,EAAMS,QAAQC,KAAI,SAAAN,GAAM,OACrB,cAAC,EAAD,CAAsBA,OAAQA,GAAnBA,EAAOC,UCJnBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCwCCG,E,kDA3Cb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,QAAS,GACTU,YAAa,IAJJ,E,4FAQb,8BAAAI,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAE2BA,EAASC,OAFpC,OAEQC,EAFR,OAGEC,KAAKV,SAAS,CAACT,QAAQkB,IAHzB,gD,0EAUA,WAAS,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,QAASU,EADV,EACUA,YACVU,EAAgBpB,EAAQqB,QAAO,SAAA1B,GAAM,OAAIA,EAAOE,KAAKyB,cAAcC,SAASb,EAAYY,kBAC9F,OAIE,sBAAK9B,UAAU,MAAf,UACE,4CAEF,cAAC,EAAD,CACAW,YAAa,iBACbC,aAAgBe,KAAKf,eAGnB,cAAC,EAAD,CAAUJ,QAASoB,W,GAnCTI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17667982.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n\n    <div className = \"card-container\">\n        <img alt=\"monsters\" src={`https://robohash.org/${props.person.id}?set=set2&size=180x180`} />\n        <h2>{props.person.name}</h2>\n        <p>{props.person.email}</p>\n    </div>\n\n)\n","import React from 'react';\nimport './card-list.style.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n        <div className= \"card-list\">\n        {\n           props.persons.map(person => (\n              <Card key={person.id} person={person} />\n              \n            ))\n          }\n          </div>\n    \n)\n","import React from 'react';\nimport './search-box.style.css';\n\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n\n    <input \n    className=\"search\" \n    type=\"search\" \n    placeholder={placeholder} \n    onChange={handleChange} />\n)","import {Component} from 'react';\nimport './App.css';\nimport { CardList} from './components/card-list/card-list.component'\nimport{SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      persons: [],\n      searchField: ''\n    }\n  }\n\n  async componentDidMount(){\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const personData = await response.json();\n    this.setState({persons:personData});\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render(){\n    const {persons, searchField } = this.state;\n    const filterPersons = persons.filter(person => person.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n\n     \n      \n      <div className=\"App\">\n        <h1>Face Cards</h1>\n\n      <SearchBox \n      placeholder= \"search persons\"\n      handleChange = {this.handleChange}\n      />\n      \n        <CardList persons={filterPersons}  />\n        \n        \n      \n       </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}